{"payload":{"tabs":[{"id":"b33845b7-42ca-4046-b1b5-47faffa95787","queryRange":{"startLineNumber":8,"startColumn":1,"endLineNumber":13,"endColumn":39},"title":"Line Charts","text":"// Full statement, overview\nStock\n| where Symbol in ('AAPL', 'MSFT', 'ORCL', 'NVDA', 'ABBN.SW', 'GOOG')\n| where valueTimestamp  > datetime(1996-01-01)\n| summarize max(close) by Symbol, bin(valueTimestamp, 30d)\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\n// Step by step\nGold_Stock\n| where valueTimestamp between (datetime(2020-01-01) .. datetime(2021-05-01)) and Symbol in('AAPL', 'GOOG', 'MSFT')\n| project Symbol, valueTimestamp, close\n| evaluate pivot(Symbol, any(close))\n| render timechart with(ysplit=panels)","commandInContext":"// Step by step\nGold_Stock\n| where valueTimestamp between (datetime(2020-01-01) .. datetime(2021-05-01)) and Symbol in('AAPL', 'GOOG', 'MSFT')\n| project Symbol, valueTimestamp, close\n| evaluate pivot(Symbol, any(close))\n| render timechart with(ysplit=panels)","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.Query;62c4c33a-34bc-4761-a29d-2c15e02f4a90;4214798b-9103-4875-b82f-838c96178ff0","entityInContext":"-2086305169/91890359-5df0-4ad4-a4a3-955df08a242f","commandType":"Query","commandWithoutLeadingComments":"// Step by step\nGold_Stock\n| where valueTimestamp between (datetime(2020-01-01) .. datetime(2021-05-01)) and Symbol in('AAPL', 'GOOG', 'MSFT')\n| project Symbol, valueTimestamp, close\n| evaluate pivot(Symbol, any(close))\n| render timechart with(ysplit=panels)","hideEmptyColumns":false,"cursorPosition":{"lineNumber":13,"column":39}},{"id":"5719841d-099b-4484-a0db-4bb49ef3c40c","queryRange":{"startLineNumber":94,"startColumn":1,"endLineNumber":95,"endColumn":18},"title":"Power BI interface","text":".show function GetStock\n\n// Parameter: (UpperEnd:datetime, WindowSize:string, BinSize:string)\n\n// Definition\n{\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close), arg_min_Ts_close = arg_min(valueTimestamp, close), minClose=min(close), avgClose=avg(close), maxClose=max(close), volume = sum(volume) by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | project valueTimestamp=arg_max_Ts_close               // Last valueTimestamp in bucket\n            , Symbol\n            , close                                         // Close of the last valueTimestamp in bucket\n            , bucketStart_valueTimestamp = arg_min_Ts_close // First valueTimestamp in bucket\n            , bucketStart_close          = close1           // Close of the first valueTimestamp in bucket\n            , minClose\n            , avgClose\n            , maxClose                  \n            , volume                                        // Sum of the volume in the bucket\n    //\n    // Calculate the growth on bucket granularity\n    | partition by Symbol\n    (\n      order by valueTimestamp asc\n      | extend lastClose = prev(close)\n      | extend gain = close - lastClose\n      | extend gainPct = gain/lastClose\n      | extend gainPct100 = round(gainPct * 100,2)\n      | extend gainLoss = iif(gain > 0,1,iif(gain<0,-1,0))\n    )\n}\n\n\n\n// 01: Show fill the gap and window definitions\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='1d';\n//{\n Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    | render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n//}\n\n\n// 02: Create the buckets\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='4d';\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close)\n               , arg_min_Ts_close = arg_min(valueTimestamp, close)\n               , minClose=min(close)\n               , avgClose=avg(close)\n               , maxClose=max(close)\n               , volume = sum(volume) \n                  by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | render linechart with(ycolumns=close, xcolumn=arg_max_Ts_close, series=Symbol)\n}\n\n\n\nGetStock(now(),'120d','7d')\n \nGetStock(now(), '720d', '5d')\n| where Symbol in ('MSFT', 'NVDA')\n| render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n\n\nStock\n| distinct Symbol","commandInContext":".show function GetStock\n\n// Parameter: (UpperEnd:datetime, WindowSize:string, BinSize:string)\n\n// Definition\n{\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close), arg_min_Ts_close = arg_min(valueTimestamp, close), minClose=min(close), avgClose=avg(close), maxClose=max(close), volume = sum(volume) by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | project valueTimestamp=arg_max_Ts_close               // Last valueTimestamp in bucket\n            , Symbol\n            , close                                         // Close of the last valueTimestamp in bucket\n            , bucketStart_valueTimestamp = arg_min_Ts_close // First valueTimestamp in bucket\n            , bucketStart_close          = close1           // Close of the first valueTimestamp in bucket\n            , minClose\n            , avgClose\n            , maxClose                  \n            , volume                                        // Sum of the volume in the bucket\n    //\n    // Calculate the growth on bucket granularity\n    | partition by Symbol\n    (\n      order by valueTimestamp asc\n      | extend lastClose = prev(close)\n      | extend gain = close - lastClose\n      | extend gainPct = gain/lastClose\n      | extend gainPct100 = round(gainPct * 100,2)\n      | extend gainLoss = iif(gain > 0,1,iif(gain<0,-1,0))\n    )\n}\n\n\n\n// 01: Show fill the gap and window definitions\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='1d';\n//{\n Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    | render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n//}\n\n\n// 02: Create the buckets\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='4d';\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close)\n               , arg_min_Ts_close = arg_min(valueTimestamp, close)\n               , minClose=min(close)\n               , avgClose=avg(close)\n               , maxClose=max(close)\n               , volume = sum(volume) \n                  by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | render linechart with(ycolumns=close, xcolumn=arg_max_Ts_close, series=Symbol)\n}\n\n\n\nGetStock(now(),'120d','7d')\n \nGetStock(now(), '720d', '5d')\n| where Symbol in ('MSFT', 'NVDA')\n| render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n\n\nStock\n| distinct Symbol","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.Query;9d8d99e4-643a-4f82-acb9-50157103cf6b;a0daea65-c74a-4fbd-9fef-28be04c70648","completionInfo":177720752,"entityInContext":"-2086305169/91890359-5df0-4ad4-a4a3-955df08a242f","commandType":"AdminCommand","commandWithoutLeadingComments":".show function GetStock\n\n// Parameter: (UpperEnd:datetime, WindowSize:string, BinSize:string)\n\n// Definition\n{\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close), arg_min_Ts_close = arg_min(valueTimestamp, close), minClose=min(close), avgClose=avg(close), maxClose=max(close), volume = sum(volume) by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | project valueTimestamp=arg_max_Ts_close               // Last valueTimestamp in bucket\n            , Symbol\n            , close                                         // Close of the last valueTimestamp in bucket\n            , bucketStart_valueTimestamp = arg_min_Ts_close // First valueTimestamp in bucket\n            , bucketStart_close          = close1           // Close of the first valueTimestamp in bucket\n            , minClose\n            , avgClose\n            , maxClose                  \n            , volume                                        // Sum of the volume in the bucket\n    //\n    // Calculate the growth on bucket granularity\n    | partition by Symbol\n    (\n      order by valueTimestamp asc\n      | extend lastClose = prev(close)\n      | extend gain = close - lastClose\n      | extend gainPct = gain/lastClose\n      | extend gainPct100 = round(gainPct * 100,2)\n      | extend gainLoss = iif(gain > 0,1,iif(gain<0,-1,0))\n    )\n}\n\n\n\n// 01: Show fill the gap and window definitions\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='1d';\n//{\n Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    | render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n//}\n\n\n// 02: Create the buckets\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='4d';\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close)\n               , arg_min_Ts_close = arg_min(valueTimestamp, close)\n               , minClose=min(close)\n               , avgClose=avg(close)\n               , maxClose=max(close)\n               , volume = sum(volume) \n                  by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | render linechart with(ycolumns=close, xcolumn=arg_max_Ts_close, series=Symbol)\n}\n\n\n\nGetStock(now(),'120d','7d')\n \nGetStock(now(), '720d', '5d')\n| where Symbol in ('MSFT', 'NVDA')\n| render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n\n\nStock\n| distinct Symbol","hideEmptyColumns":false,"cursorPosition":{"lineNumber":95,"column":18}},{"id":"88abeddb-d106-46fd-8078-e3842bb44593","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":7,"endColumn":19},"title":"Outliers","text":"range x from 1 to 100 step 1 \n| extend y=iff(x==20 or x==80, 10*rand()+10+(50-x)/2, 10*rand()+10) // series with outliers at x=20 and x=80\n| summarize x=make_list(x),series=make_list(y)\n| extend series_stats(series), outliers=series_outliers(series)\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\n| project x, series , outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg , series ) \n| render linechart","commandInContext":"range x from 1 to 100 step 1 \n| extend y=iff(x==20 or x==80, 10*rand()+10+(50-x)/2, 10*rand()+10) // series with outliers at x=20 and x=80\n| summarize x=make_list(x),series=make_list(y)\n| extend series_stats(series), outliers=series_outliers(series)\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\n| project x, series , outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg , series ) \n| render linechart","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;62c4c33a-34bc-4761-a29d-2c15e02f4a90;eb81147b-7ad1-4a31-be68-90d39308251b","entityInContext":"-2086305169/91890359-5df0-4ad4-a4a3-955df08a242f","commandType":"Query","commandWithoutLeadingComments":"range x from 1 to 100 step 1 \n| extend y=iff(x==20 or x==80, 10*rand()+10+(50-x)/2, 10*rand()+10) // series with outliers at x=20 and x=80\n| summarize x=make_list(x),series=make_list(y)\n| extend series_stats(series), outliers=series_outliers(series)\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\n| project x, series , outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg , series ) \n| render linechart","hideEmptyColumns":false,"cursorPosition":{"lineNumber":7,"column":19}},{"id":"5d679c6a-9483-4e54-a50a-8e15d78a38f8","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":1,"endColumn":35},"title":"Shortcuts","text":"external_table('bronze_company_8')","commandInContext":"external_table('bronze_company_8')","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.Query;9d8d99e4-643a-4f82-acb9-50157103cf6b;26def446-68cf-427f-b171-0abaec4298b1","completionInfo":-834418654,"entityInContext":"-2086305169/91890359-5df0-4ad4-a4a3-955df08a242f","commandType":"Query","commandWithoutLeadingComments":"external_table('bronze_company_8')","hideEmptyColumns":false,"cursorPosition":{"lineNumber":1,"column":35}}],"tabInContext":"5d679c6a-9483-4e54-a50a-8e15d78a38f8","connections":{"-2086305169":{"clusterType":"Engine","name":"-2086305169","connectionString":"","initialCatalog":"91890359-5df0-4ad4-a4a3-955df08a242f","databases":{"-2086305169/91890359-5df0-4ad4-a4a3-955df08a242f":{"id":"-2086305169/91890359-5df0-4ad4-a4a3-955df08a242f","name":"91890359-5df0-4ad4-a4a3-955df08a242f","prettyName":"EH_Stocks","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":2,"majorVersion":9789}},"id":"-2086305169","fetchState":"done","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}}}}